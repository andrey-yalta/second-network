{"ast":null,"code":"var _jsxFileName = \"/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/Dialogs.js\";\nimport React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport { addMessageActionCreator, messageChangedActionCreator } from \"../../state\";\n\nconst Dialogs = props => {\n  debugger;\n\n  let sendMessage = () => {\n    debugger;\n    props.dispatch(addMessageActionCreator());\n  };\n\n  let changedMessage = () => {\n    let messageValue = messageCurrentValue.current.value;\n    props.dispatch(messageChangedActionCreator(messageValue));\n  };\n\n  let messageCurrentValue = React.createRef(); // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n\n  let usersElements = props.dialogsPage.users.map(u => /*#__PURE__*/React.createElement(UserItem, {\n    key: u.id,\n    id: u.id,\n    name: u.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 58\n    }\n  }));\n  {\n    /* обработка массива users с помощью map в jsx итемы*/\n  }\n  let messageElements = props.dialogsPage.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n    key: m.id,\n    message: m.message,\n    id: m.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 62\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: s.dialogs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: s.users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, usersElements), /*#__PURE__*/React.createElement(\"div\", {\n    className: s.messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, messageElements, /*#__PURE__*/React.createElement(\"div\", {\n    className: s.area,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    ref: messageCurrentValue,\n    placeholder: \"\",\n    onChange: changedMessage,\n    value: props.dialogsPage.currentValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, \"SEND\")))));\n};\n\nexport default Dialogs;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/Dialogs.js"],"names":["React","s","UserItem","Message","addMessageActionCreator","messageChangedActionCreator","Dialogs","props","sendMessage","dispatch","changedMessage","messageValue","messageCurrentValue","current","value","createRef","usersElements","dialogsPage","users","map","u","id","name","messageElements","messages","m","message","dialogs","area","currentValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,aAAnE;;AAIA,MAAMC,OAAO,GAAGC,KAAD,IAAS;AACpB;;AAEA,MAAIC,WAAW,GAAE,MAAI;AACjB;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAeL,uBAAuB,EAAtC;AACH,GAHD;;AAIA,MAAIM,cAAc,GAAE,MAAI;AACpB,QAAIC,YAAY,GAAGC,mBAAmB,CAACC,OAApB,CAA4BC,KAA/C;AACAP,IAAAA,KAAK,CAACE,QAAN,CAAeJ,2BAA2B,CAACM,YAAD,CAA1C;AACH,GAHD;;AAKA,MAAIC,mBAAmB,GAAGZ,KAAK,CAACe,SAAN,EAA1B,CAZoB,CAapB;;AACA,MAAIC,aAAa,GAAGT,KAAK,CAACU,WAAN,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BC,CAAC,iBAAI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,IAAA,IAAI,EAAED,CAAC,CAACE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAApB;AAAsG;AAAC;AAAuD;AAC9J,MAAIC,eAAe,GAAGhB,KAAK,CAACU,WAAN,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+BM,CAAC,iBAAG,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAACJ,EAAhB;AAAoB,IAAA,OAAO,EAAEI,CAAC,CAACC,OAA/B;AAAwC,IAAA,EAAE,EAAED,CAAC,CAACJ,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAtB;AACA,sBACI;AAAK,IAAA,SAAS,EAAEpB,CAAC,CAAC0B,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAE1B,CAAC,CAACiB,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,aADL,CADJ,eAII;AAAK,IAAA,SAAS,EAAEf,CAAC,CAACuB,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,eADL,eAEI;AAAK,IAAA,SAAS,EAAEtB,CAAC,CAAC2B,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAU,IAAA,GAAG,EAAEhB,mBAAf;AAAqC,IAAA,WAAW,EAAE,EAAlD;AAAsD,IAAA,QAAQ,EAAEF,cAAhE;AAAgF,IAAA,KAAK,EAAEH,KAAK,CAACU,WAAN,CAAkBY,YAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAErB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CAFJ,CAFJ,CAJJ,CADJ;AAiBH,CAjCD;;AAkCA,eAAeF,OAAf","sourcesContent":["import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport {addMessageActionCreator, messageChangedActionCreator} from \"../../state\";\n\n\n\nconst Dialogs =(props)=>{\n    debugger;\n\n    let sendMessage =()=>{\n        debugger;\n        props.dispatch(addMessageActionCreator())\n    }\n    let changedMessage =()=>{\n        let messageValue = messageCurrentValue.current.value;\n        props.dispatch(messageChangedActionCreator(messageValue));\n    }\n\n    let messageCurrentValue = React.createRef();\n    // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n    let usersElements = props.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>); {/* обработка массива users с помощью map в jsx итемы*/}\n    let messageElements = props.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n    return(\n        <div className={s.dialogs}>\n            <div className={s.users}>\n                {usersElements}\n            </div>\n            <div className={s.messages}>\n                {messageElements}\n                <div className={s.area}>\n                    <textarea ref={messageCurrentValue}  placeholder={\"\"} onChange={changedMessage} value={props.dialogsPage.currentValue}/>\n                    <div>\n                        <button onClick={sendMessage}>SEND</button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\nexport default Dialogs;"]},"metadata":{},"sourceType":"module"}