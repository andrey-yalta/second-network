{"ast":null,"code":"var _jsxFileName = \"/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js\";\nimport React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport { addMessageActionCreator, messageChangedActionCreator } from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = props => {\n  debugger;\n\n  let sendMessage = () => {\n    debugger;\n    props.dispatch(addMessageActionCreator());\n  };\n\n  let changedMessage = e => {\n    //e это короче как ссылка или что-то типа того\n    // для примера можно посмотреть как в posts это реализовано через ref\n    let messageValue = e.target.value;\n    props.dispatch(messageChangedActionCreator(messageValue));\n  }; // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n\n\n  let usersElements = props.dialogsPage.users.map(u => /*#__PURE__*/React.createElement(UserItem, {\n    key: u.id,\n    id: u.id,\n    name: u.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 58\n    }\n  }));\n  {\n    /* обработка массива users с помощью map в jsx итемы*/\n  }\n  let messageElements = props.dialogsPage.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n    key: m.id,\n    message: m.message,\n    id: m.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 62\n    }\n  }));\n  return /*#__PURE__*/React.createElement(Dialogs, {\n    sendMessage: sendMessage,\n    onChange: changedMessage,\n    users: usersElements,\n    messages: messageElements,\n    value: props.dialogsPage.currentValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js"],"names":["React","s","UserItem","Message","addMessageActionCreator","messageChangedActionCreator","Dialogs","DialogsContainer","props","sendMessage","dispatch","changedMessage","e","messageValue","target","value","usersElements","dialogsPage","users","map","u","id","name","messageElements","messages","m","message","currentValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,mBAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,gBAAgB,GAAGC,KAAD,IAAS;AAC7B;;AAEA,MAAIC,WAAW,GAAE,MAAI;AACjB;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAeN,uBAAuB,EAAtC;AACH,GAHD;;AAIA,MAAIO,cAAc,GAAGC,CAAD,IAAK;AACrB;AACA;AACA,QAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA5B;AACAP,IAAAA,KAAK,CAACE,QAAN,CAAeL,2BAA2B,CAACQ,YAAD,CAA1C;AACH,GALD,CAP6B,CAe7B;;;AACA,MAAIG,aAAa,GAAGR,KAAK,CAACS,WAAN,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BC,CAAC,iBAAI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,IAAA,IAAI,EAAED,CAAC,CAACE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAApB;AAAsG;AAAC;AAAuD;AAC9J,MAAIC,eAAe,GAAGf,KAAK,CAACS,WAAN,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+BM,CAAC,iBAAG,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAACJ,EAAhB;AAAoB,IAAA,OAAO,EAAEI,CAAC,CAACC,OAA/B;AAAwC,IAAA,EAAE,EAAED,CAAC,CAACJ,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAtB;AACA,sBACI,oBAAC,OAAD;AAAS,IAAA,WAAW,EAAEZ,WAAtB;AAAmC,IAAA,QAAQ,EAAEE,cAA7C;AAA6D,IAAA,KAAK,EAAIK,aAAtE;AAAqF,IAAA,QAAQ,EAAIO,eAAjG;AAAkH,IAAA,KAAK,EAAEf,KAAK,CAACS,WAAN,CAAkBU,YAA3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAtBD;;AAuBA,eAAepB,gBAAf","sourcesContent":["import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport {addMessageActionCreator, messageChangedActionCreator} from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\n\n\nconst DialogsContainer =(props)=>{\n    debugger;\n\n    let sendMessage =()=>{\n        debugger;\n        props.dispatch(addMessageActionCreator())\n    }\n    let changedMessage =(e)=>{\n        //e это короче как ссылка или что-то типа того\n        // для примера можно посмотреть как в posts это реализовано через ref\n        let messageValue = e.target.value;\n        props.dispatch(messageChangedActionCreator(messageValue));\n    }\n\n\n    // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n    let usersElements = props.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>); {/* обработка массива users с помощью map в jsx итемы*/}\n    let messageElements = props.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n    return(\n        <Dialogs sendMessage={sendMessage} onChange={changedMessage} users = {usersElements} messages = {messageElements} value={props.dialogsPage.currentValue}/>\n\n    )\n}\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}