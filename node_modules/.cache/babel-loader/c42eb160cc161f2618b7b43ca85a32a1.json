{"ast":null,"code":"var _jsxFileName = \"/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js\";\nimport React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport { addMessageActionCreator, messageChangedActionCreator } from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport mapStateToProps from \"react-redux/lib/connect/mapStateToProps\";\nimport mapDispatchToProps from \"react-redux/lib/connect/mapDispatchToProps\";\n\nconst DialogsContainer = props => {\n  debugger;\n\n  let sendMessage = () => {\n    debugger;\n    props.dispatch(addMessageActionCreator());\n  };\n\n  let onChange = messageValue => {\n    //e это короче как ссылка или что-то типа того\n    // для примера можно посмотреть как в posts это реализовано через ref\n    props.dispatch(messageChangedActionCreator(messageValue));\n  }; // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n\n\n  let usersElements = props.dialogsPage.users.map(u => /*#__PURE__*/React.createElement(UserItem, {\n    key: u.id,\n    id: u.id,\n    name: u.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 58\n    }\n  }));\n  {\n    /* обработка массива users с помощью map в jsx итемы*/\n  }\n  let messageElements = props.dialogsPage.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n    key: m.id,\n    message: m.message,\n    id: m.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 62\n    }\n  }));\n  return /*#__PURE__*/React.createElement(Dialogs, {\n    sendMessage: sendMessage,\n    onChange: onChange,\n    users: usersElements,\n    messages: messageElements,\n    value: props.dialogsPage.currentValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  });\n};\n\nexport const Container = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js"],"names":["React","s","UserItem","Message","addMessageActionCreator","messageChangedActionCreator","Dialogs","connect","mapStateToProps","mapDispatchToProps","DialogsContainer","props","sendMessage","dispatch","onChange","messageValue","usersElements","dialogsPage","users","map","u","id","name","messageElements","messages","m","message","currentValue","Container"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,mBAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;;AAGA,MAAMC,gBAAgB,GAAGC,KAAD,IAAS;AAC7B;;AAEA,MAAIC,WAAW,GAAE,MAAI;AACjB;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAeT,uBAAuB,EAAtC;AACH,GAHD;;AAIA,MAAIU,QAAQ,GAAGC,YAAD,IAAgB;AAC1B;AACA;AACAJ,IAAAA,KAAK,CAACE,QAAN,CAAeR,2BAA2B,CAACU,YAAD,CAA1C;AACH,GAJD,CAP6B,CAc7B;;;AACA,MAAIC,aAAa,GAAGL,KAAK,CAACM,WAAN,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BC,CAAC,iBAAI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,IAAA,IAAI,EAAED,CAAC,CAACE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAApB;AAAsG;AAAC;AAAuD;AAC9J,MAAIC,eAAe,GAAGZ,KAAK,CAACM,WAAN,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+BM,CAAC,iBAAG,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAACJ,EAAhB;AAAoB,IAAA,OAAO,EAAEI,CAAC,CAACC,OAA/B;AAAwC,IAAA,EAAE,EAAED,CAAC,CAACJ,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAtB;AAGA,sBACI,oBAAC,OAAD;AAAS,IAAA,WAAW,EAAET,WAAtB;AAAmC,IAAA,QAAQ,EAAEE,QAA7C;AAAuD,IAAA,KAAK,EAAIE,aAAhE;AAA+E,IAAA,QAAQ,EAAIO,eAA3F;AAA4G,IAAA,KAAK,EAAEZ,KAAK,CAACM,WAAN,CAAkBU,YAArI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAvBD;;AA0BA,OAAO,MAAMC,SAAS,GAAGrB,OAAO,CAACC,eAAD,EAAiBC,kBAAjB,CAAP,CAA4CH,OAA5C,CAAlB;AAEP,eAAeI,gBAAf","sourcesContent":["import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport {addMessageActionCreator, messageChangedActionCreator} from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport mapStateToProps from \"react-redux/lib/connect/mapStateToProps\";\nimport mapDispatchToProps from \"react-redux/lib/connect/mapDispatchToProps\";\n\n\nconst DialogsContainer =(props)=>{\n    debugger;\n\n    let sendMessage =()=>{\n        debugger;\n        props.dispatch(addMessageActionCreator())\n    }\n    let onChange =(messageValue)=>{\n        //e это короче как ссылка или что-то типа того\n        // для примера можно посмотреть как в posts это реализовано через ref\n        props.dispatch(messageChangedActionCreator(messageValue));\n    }\n\n\n    // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n    let usersElements = props.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>); {/* обработка массива users с помощью map в jsx итемы*/}\n    let messageElements = props.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n\n\n    return(\n        <Dialogs sendMessage={sendMessage} onChange={onChange} users = {usersElements} messages = {messageElements} value={props.dialogsPage.currentValue}/>\n\n    )\n}\n\n\nexport const Container = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}