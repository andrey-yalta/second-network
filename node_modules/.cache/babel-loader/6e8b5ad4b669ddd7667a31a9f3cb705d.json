{"ast":null,"code":"import { authAPI, headerAPI } from \"../api/api\";\nimport { Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport { dataKey } from \"redux-form/lib/util/eventConsts\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_DATA = \"SET-AUTH-DATA\";\nlet initialState = {\n  data: {},\n  userId: null,\n  isAuth: false\n};\n\nlet authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET-AUTH-DATA\":\n      {\n        return { ...state,\n          data: { ...action.data\n          },\n          userId: action.data.data.id\n        };\n      }\n\n    case \"TOGGLE-IS-AUTH\":\n      {\n        return { ...state,\n          isAuth: true\n        };\n      }\n\n    case \"AUTH-IS-OFF\":\n      {\n        return { ...state,\n          isAuth: false,\n          data: {}\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const loginThunkCreator = (email, password, rememberMe = true) => async dispatch => {\n  let data = await authAPI.login(email, password, rememberMe);\n\n  if (data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = data.messages.length > 0 ? data.messages[0] : \"some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logoutThunkCreator = () => async dispatch => {\n  let data = await authAPI.logout();\n\n  if (data.resultCode === 0) {\n    dispatch(authIsOff());\n  }\n};\nexport const getAuthUserData = () => //надо обязательно оборачивать два раза даже если в первом вызове ничего не передаём, видимо для кол-бэка\nasync (dispatch) => {\n  // dispatch(toggleIsFetching(true));\n  let data = await headerAPI.getHeader();\n  dispatch(setAuthData(data));\n\n  if (data.resultCode === 0) {\n    dispatch(toggleIsAuth());\n  }\n};\nexport default authReducer;\nexport const authIsOff = () => ({\n  type: \"AUTH-IS-OFF\"\n});\nexport const toggleIsAuth = () => ({\n  type: \"TOGGLE-IS-AUTH\"\n});\nexport const setAuthData = data => ({\n  type: SET_AUTH_DATA,\n  data: data\n});","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/redux/auth-reducer.js"],"names":["authAPI","headerAPI","Redirect","React","dataKey","stopSubmit","SET_AUTH_DATA","initialState","data","userId","isAuth","authReducer","state","action","type","id","loginThunkCreator","email","password","rememberMe","dispatch","login","resultCode","getAuthUserData","message","messages","length","_error","logoutThunkCreator","logout","authIsOff","getHeader","setAuthData","toggleIsAuth"],"mappings":"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","sourcesContent":["import {authAPI, headerAPI} from \"../api/api\";\nimport {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {dataKey} from \"redux-form/lib/util/eventConsts\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_AUTH_DATA = \"SET-AUTH-DATA\";\nlet initialState ={\n    data:{},\n    userId:null,\n    isAuth:false,\n}\nlet  authReducer =(state = initialState,action)=>{\n    switch (action.type) {\n\n        case \"SET-AUTH-DATA\":{\n\n            return { ...state, data: {...action.data}, userId: action.data.data.id};\n        }\n        case \"TOGGLE-IS-AUTH\":{\n\n            return {...state, isAuth: true};\n        }\n        case \"AUTH-IS-OFF\":{\n\n            return {...state, isAuth: false, data:{}};\n        }\n        default:\n            return state;\n    }\n}\n\nexport const loginThunkCreator =(email, password, rememberMe = true)=>\n    async(dispatch)=>{\n\n         let data = await authAPI.login(email,password,rememberMe)\n                    if(data.resultCode ===0){\n                        dispatch(getAuthUserData());\n                    }\n                    else {\n                        let message = data.messages.length >0 ? data.messages[0] :\"some error\";\n\n                        dispatch(stopSubmit(\"login\",{_error:message}));\n                    }\n    }\nexport const logoutThunkCreator =()=>\n    async(dispatch)=>{\n        let data = await authAPI.logout()\n                    if(data.resultCode ===0){\n                        dispatch(authIsOff());\n                    }\n    }\n\nexport const getAuthUserData= ()=>\n    //надо обязательно оборачивать два раза даже если в первом вызове ничего не передаём, видимо для кол-бэка\n    async(dispatch)=>\n    {\n        // dispatch(toggleIsFetching(true));\n        let data = await  headerAPI.getHeader()\n                dispatch(setAuthData(data));\n                if(data.resultCode ===0){\n                    dispatch(toggleIsAuth());\n                }\n}\n\n\n\nexport default authReducer;\nexport const authIsOff =()=>({type: \"AUTH-IS-OFF\"})\nexport const toggleIsAuth =()=>({type:\"TOGGLE-IS-AUTH\" })\nexport const setAuthData =(data)=>({type:SET_AUTH_DATA, data:data})"]},"metadata":{},"sourceType":"module"}