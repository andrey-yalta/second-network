{"ast":null,"code":"var _jsxFileName = \"/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js\";\nimport React from \"react\";\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport { addMessageActionCreator, messageChangedActionCreator } from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToProps = state => {\n  let usersElements = state.dialogsPage.users.map(u => /*#__PURE__*/React.createElement(UserItem, {\n    key: u.id,\n    id: u.id,\n    name: u.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 58\n    }\n  }));\n  let messageElements = state.dialogsPage.messages.map(m => /*#__PURE__*/React.createElement(Message, {\n    key: m.id,\n    message: m.message,\n    id: m.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 65\n    }\n  }));\n  debugger;\n  return {\n    dialogsPage: state.dialogsPage,\n    usersElements: usersElements,\n    messageElements: messageElements,\n    value: state.dialogsPage.currentValue,\n    isAuth: state.auth.data\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: () => {\n      dispatch(addMessageActionCreator());\n    },\n    onChange: messageValue => {\n      dispatch(messageChangedActionCreator(messageValue));\n    }\n  };\n};\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js"],"names":["React","UserItem","Message","addMessageActionCreator","messageChangedActionCreator","Dialogs","connect","mapStateToProps","state","usersElements","dialogsPage","users","map","u","id","name","messageElements","messages","m","message","value","currentValue","isAuth","auth","data","mapDispatchToProps","dispatch","sendMessage","onChange","messageValue","DialogsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,mBAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,IAAIC,eAAe,GAAGC,KAAD,IAAS;AAE1B,MAAIC,aAAa,GAAGD,KAAK,CAACE,WAAN,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BC,CAAC,iBAAI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,IAAA,IAAI,EAAED,CAAC,CAACE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAApB;AACG,MAAIC,eAAe,GAAGR,KAAK,CAACE,WAAN,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+BM,CAAC,iBAAG,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,CAAC,CAACJ,EAAhB;AAAoB,IAAA,OAAO,EAAEI,CAAC,CAACC,OAA/B;AAAwC,IAAA,EAAE,EAAED,CAAC,CAACJ,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CAAtB;AACH;AACA,SAAM;AACFJ,IAAAA,WAAW,EAAEF,KAAK,CAACE,WADjB;AAEFD,IAAAA,aAAa,EAACA,aAFZ;AAGFO,IAAAA,eAAe,EAAGA,eAHhB;AAIFI,IAAAA,KAAK,EAAEZ,KAAK,CAACE,WAAN,CAAkBW,YAJvB;AAKFC,IAAAA,MAAM,EAAEd,KAAK,CAACe,IAAN,CAAWC;AALjB,GAAN;AAOH,CAZD;;AAaA,IAAIC,kBAAkB,GAAGC,QAAD,IAAY;AAChC,SAAM;AACFC,IAAAA,WAAW,EAAC,MAAI;AAACD,MAAAA,QAAQ,CAACvB,uBAAuB,EAAxB,CAAR;AAAoC,KADnD;AAEFyB,IAAAA,QAAQ,EAAGC,YAAD,IAAgB;AAACH,MAAAA,QAAQ,CAACtB,2BAA2B,CAACyB,YAAD,CAA5B,CAAR;AAAoD;AAF7E,GAAN;AAIH,CALD;;AAQA,MAAMC,gBAAgB,GAAGxB,OAAO,CAACC,eAAD,EAAiBkB,kBAAjB,CAAP,CAA4CpB,OAA5C,CAAzB;AAEA,eAAeyB,gBAAf","sourcesContent":["import React from \"react\";\n\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport {addMessageActionCreator, messageChangedActionCreator} from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps =(state)=>{\n\n    let usersElements = state.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>);\n       let messageElements = state.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n    debugger;\n    return{\n        dialogsPage: state.dialogsPage,\n        usersElements:usersElements,\n        messageElements : messageElements,\n        value: state.dialogsPage.currentValue,\n        isAuth: state.auth.data,\n    }\n};\nlet mapDispatchToProps =(dispatch)=>{\n    return{\n        sendMessage:()=>{dispatch(addMessageActionCreator())},\n        onChange: (messageValue)=>{dispatch(messageChangedActionCreator(messageValue))}\n    }\n}\n\n\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}