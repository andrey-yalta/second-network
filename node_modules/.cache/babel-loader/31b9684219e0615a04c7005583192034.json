{"ast":null,"code":"var _jsxFileName = \"/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js\";\nimport React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport { addMessageActionCreator, messageChangedActionCreator } from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\"; // const DialogsContainer =(props)=>{\n//     debugger;\n//\n//     let sendMessage =()=>{\n//         debugger;\n//         props.dispatch(addMessageActionCreator())\n//     }\n//     let onChange =(messageValue)=>{\n//         //e это короче как ссылка или что-то типа того\n//         // для примера можно посмотреть как в posts это реализовано через ref\n//         props.dispatch(messageChangedActionCreator(messageValue));\n//     }\n//\n//\n//     // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n//     let usersElements = props.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>); {/* обработка массива users с помощью map в jsx итемы*/}\n//     let messageElements = props.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n//\n//\n//     return(\n//         <Dialogs sendMessage={sendMessage} onChange={onChange} users = {usersElements} messages = {messageElements} value={props.dialogsPage.currentValue}/>\n//\n//     )\n// }\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.getState().dialogsPage,\n    usersElements: state.getState().dialogsPage.users.map(u => /*#__PURE__*/React.createElement(UserItem, {\n      key: u.id,\n      id: u.id,\n      name: u.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 67\n      }\n    })),\n    messageElements: state.getState().messages.map(m => /*#__PURE__*/React.createElement(Message, {\n      key: m.id,\n      message: m.message,\n      id: m.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 61\n      }\n    }))\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: () => {\n      dispatch(addMessageActionCreator());\n    },\n    onChange: messageValue => {\n      dispatch(messageChangedActionCreator(messageValue));\n    }\n  };\n};\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"sources":["/Users/andrejzaharcenko/Desktop/second-network/src/components/Dialogs/DialogsContainer.js"],"names":["React","s","UserItem","Message","addMessageActionCreator","messageChangedActionCreator","Dialogs","connect","mapStateToProps","state","dialogsPage","getState","usersElements","users","map","u","id","name","messageElements","messages","m","message","mapDispatchToProps","dispatch","sendMessage","onChange","messageValue","DialogsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAAQC,uBAAR,EAAiCC,2BAAjC,QAAmE,mBAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAGC,KAAD,IAAS;AAC1B,SAAM;AACFC,IAAAA,WAAW,EAAED,KAAK,CAACE,QAAN,GAAiBD,WAD5B;AAEFE,IAAAA,aAAa,EAACH,KAAK,CAACE,QAAN,GAAiBD,WAAjB,CAA6BG,KAA7B,CAAmCC,GAAnC,CAAuCC,CAAC,iBAAI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,MAAA,EAAE,EAAED,CAAC,CAACC,EAA3B;AAA+B,MAAA,IAAI,EAAED,CAAC,CAACE,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5C,CAFZ;AAGFC,IAAAA,eAAe,EAAGT,KAAK,CAACE,QAAN,GAAiBQ,QAAjB,CAA0BL,GAA1B,CAA8BM,CAAC,iBAAG,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAC,CAACJ,EAAhB;AAAoB,MAAA,OAAO,EAAEI,CAAC,CAACC,OAA/B;AAAwC,MAAA,EAAE,EAAED,CAAC,CAACJ,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC;AAHhB,GAAN;AAOH,CARD;;AASA,IAAIM,kBAAkB,GAAGC,QAAD,IAAY;AAChC,SAAM;AACFC,IAAAA,WAAW,EAAC,MAAI;AAACD,MAAAA,QAAQ,CAACnB,uBAAuB,EAAxB,CAAR;AAAoC,KADnD;AAEFqB,IAAAA,QAAQ,EAAGC,YAAD,IAAgB;AAACH,MAAAA,QAAQ,CAAClB,2BAA2B,CAACqB,YAAD,CAA5B,CAAR;AAAoD;AAF7E,GAAN;AAIH,CALD;;AASA,MAAMC,gBAAgB,GAAGpB,OAAO,CAACC,eAAD,EAAiBc,kBAAjB,CAAP,CAA4ChB,OAA5C,CAAzB;AAEA,eAAeqB,gBAAf","sourcesContent":["import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport UserItem from \"./UsersItem/UsersItem\";\nimport Message from \"./Messages/Messages\";\nimport {addMessageActionCreator, messageChangedActionCreator} from \"../../redux/state\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\n\n\n\n// const DialogsContainer =(props)=>{\n//     debugger;\n//\n//     let sendMessage =()=>{\n//         debugger;\n//         props.dispatch(addMessageActionCreator())\n//     }\n//     let onChange =(messageValue)=>{\n//         //e это короче как ссылка или что-то типа того\n//         // для примера можно посмотреть как в posts это реализовано через ref\n//         props.dispatch(messageChangedActionCreator(messageValue));\n//     }\n//\n//\n//     // в map надо всегда добавлять строку key = id чтобы не вылезала ошибка в консоле\n//     let usersElements = props.dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>); {/* обработка массива users с помощью map в jsx итемы*/}\n//     let messageElements = props.dialogsPage.messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>);\n//\n//\n//     return(\n//         <Dialogs sendMessage={sendMessage} onChange={onChange} users = {usersElements} messages = {messageElements} value={props.dialogsPage.currentValue}/>\n//\n//     )\n// }\n\nlet mapStateToProps =(state)=>{\n    return{\n        dialogsPage: state.getState().dialogsPage,\n        usersElements:state.getState().dialogsPage.users.map(u => <UserItem key={u.id} id={u.id} name={u.name}/>),\n        messageElements : state.getState().messages.map(m=> <Message key={m.id} message={m.message} id={m.id}/>),\n\n    }\n\n};\nlet mapDispatchToProps =(dispatch)=>{\n    return{\n        sendMessage:()=>{dispatch(addMessageActionCreator())},\n        onChange: (messageValue)=>{dispatch(messageChangedActionCreator(messageValue))}\n    }\n}\n\n\n\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(Dialogs);\n\nexport default DialogsContainer;"]},"metadata":{},"sourceType":"module"}